{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["ActionsWithTodo","ActionsWithFilter","actionsWithTodo","todo","type","SET","payload","REMOVE","currentTodoReducer","state","action","TodosActionType","actionsWithFilter","ALL","COMPLETED","ACTIVE","query","QUERY","filterReducer","status","actionsWithTodos","todos","SetTodos","todosReducer","todosState","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","todosToShow","isIncludeQuery","title","toLowerCase","includes","completed","dispatch","length","className","map","id","onClick","TodoFilter","onSubmit","event","preventDefault","onChange","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","isTodoLoading","setIsTodoLoading","user","setUser","useEffect","userId","finally","href","email","name","App","isLoading","setIsLoading","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c07c066.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nenum ActionsWithTodo {\n  SET = 'currentTodo/SET',\n  REMOVE = 'currentTodo/REMOVE',\n}\nconst removeTodo = (): RemoveTodoAction => ({ type: ActionsWithTodo.REMOVE });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: ActionsWithTodo.SET,\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actionsWithTodo = {\n  set: setTodo,\n  remove: removeTodo,\n};\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case ActionsWithTodo.SET:\n      return action.payload;\n    case ActionsWithTodo.REMOVE:\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\nenum ActionsWithFilter {\n  ALL = 'filterStatus/ALL',\n  COMPLETED = 'filterStatus/COMPLETED',\n  ACTIVE = 'filterStatus/ACTIVE',\n  QUERY = 'filterQuery/QUERY',\n}\n\ntype SetFilterStatusAll = {\n  type: ActionsWithFilter.ALL;\n  payload: Status;\n};\ntype SetFilterStatusDone = {\n  type: ActionsWithFilter.COMPLETED;\n  payload: Status;\n};\ntype SetFilterStatusActive = {\n  type: ActionsWithFilter.ACTIVE;\n  payload: Status;\n};\ntype SetFilterByQuery = {\n  type: ActionsWithFilter.QUERY;\n  payload: string;\n};\n\nconst filteredAll = (): SetFilterStatusAll => ({\n  type: ActionsWithFilter.ALL,\n  payload: 'all',\n});\n\nconst filteredByCompleted = (): SetFilterStatusDone => ({\n  type: ActionsWithFilter.COMPLETED,\n  payload: 'completed',\n});\n\nconst filteredByActive = (): SetFilterStatusActive => ({\n  type: ActionsWithFilter.ACTIVE,\n  payload: 'active',\n});\n\nconst filteredByQuery = (query: string): SetFilterByQuery => ({\n  type: ActionsWithFilter.QUERY,\n  payload: query,\n});\n\nexport const actionsWithFilter = {\n  all: filteredAll,\n  completed: filteredByCompleted,\n  active: filteredByActive,\n  query: filteredByQuery,\n};\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\ntype Action = (\n  SetFilterStatusAll | SetFilterStatusDone\n  | SetFilterStatusActive | SetFilterByQuery\n);\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: 'all',\n  },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case ActionsWithFilter.ALL:\n      return {\n        ...state,\n        status: 'all',\n      };\n\n    case ActionsWithFilter.ACTIVE:\n      return {\n        ...state,\n        status: 'active',\n      };\n\n    case ActionsWithFilter.COMPLETED:\n      return {\n        ...state,\n        status: 'completed',\n      };\n\n    case ActionsWithFilter.QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Action } from 'redux';\nimport { Todo } from '../types/Todo';\n\ninterface FullAction<T, P> extends Action<T> {\n  payload: P,\n}\n\nexport enum TodosActionType {\n  SetTodos = 'todos/set_todos',\n}\n\nexport type SetTodosAction = FullAction<TodosActionType.SetTodos, Todo[]>;\n\nconst setTodosActionCreator = (todos: Todo[]): SetTodosAction => ({\n  type: TodosActionType.SetTodos,\n  payload: todos,\n});\n\nexport const actionsWithTodos = {\n  set: setTodosActionCreator,\n};\n\ntype TodosActions = SetTodosAction;\n\nconst todosReducer = (\n  todosState: Todo[] = [],\n  action: TodosActions,\n): Todo[] => {\n  switch (action.type) {\n    case TodosActionType.SetTodos:\n      return action.payload;\n\n    default:\n      return todosState;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actionsWithTodo } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => {\n    let { todos: todosToShow } = state;\n    const { query, status } = state.filter;\n\n    todosToShow = todosToShow.filter(todo => {\n      const isIncludeQuery = todo.title.toLowerCase().includes(query.toLowerCase());\n\n      switch (status) {\n        case 'active':\n          return !todo.completed && isIncludeQuery;\n\n        case 'completed':\n          return todo.completed && isIncludeQuery;\n\n        case 'all':\n        default:\n          return isIncludeQuery;\n      }\n    });\n\n    return todosToShow;\n  });\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {todos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              key={todo.id}\n              className={todo === currentTodo ? 'has-background-info-light' : ''}\n            >\n              <td className=\"is-vcentered\">\n                {todo.id}\n              </td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span\n                    className=\"icon\"\n                    data-cy=\"iconCompleted\"\n                  >\n                    <i\n                      className=\"fas fa-check\"\n                    />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(actionsWithTodo.set(todo));\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={currentTodo === todo\n                      ? 'far fa-eye-slash'\n                      : 'far fa-eye'}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actionsWithFilter } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { query } = useAppSelector(state => state.filter);\n\n  const chooseOfFilterMethod = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    switch (event.target.value) {\n      case 'active':\n        return dispatch(actionsWithFilter.active());\n\n      case 'completed':\n        return dispatch(actionsWithFilter.completed());\n\n      case 'all':\n      default:\n        return dispatch(actionsWithFilter.all());\n    }\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={chooseOfFilterMethod}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event => {\n            dispatch(actionsWithFilter.query(event.target.value));\n          })}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(actionsWithFilter.query(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { useAppSelector } from '../../app/hooks';\nimport { actionsWithTodo } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [isTodoLoading, setIsTodoLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsTodoLoading(true);\n    getUser(currentTodo?.userId || 0)\n      .then(res => setUser(res))\n      .finally(() => setIsTodoLoading(false));\n  }, []);\n\n  return (\n    <div\n      className=\"modal is-active\"\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {isTodoLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                Todo #\n                {currentTodo?.id}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => {\n                  dispatch(actionsWithTodo.remove());\n                }}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p\n                className=\"block\"\n                data-cy=\"modal-title\"\n              >\n                {currentTodo?.title}\n              </p>\n\n              <p\n                className=\"block\"\n                data-cy=\"modal-user\"\n              >\n                {currentTodo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actionsWithTodos } from './features/todos';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(res => {\n        dispatch(actionsWithTodos.set(res));\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}