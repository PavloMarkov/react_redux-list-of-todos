{"version":3,"sources":["features/currentTodoID.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoIDActionType","FilterMethods","FiltersActionType","actionsWithTodoID","todoID","type","SET","payload","REMOVE","currentTodoIDReducer","state","action","TodosActionType","actionsWithFilter","ALL","COMPLETED","ACTIVE","query","QUERY","filterReducer","status","actionsWithTodos","todos","SetTodos","todosReducer","todosState","rootReducer","combineReducers","currentTodoID","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","todosToShow","todo","isIncludeQuery","title","toLowerCase","includes","trim","completed","dispatch","length","className","map","id","onClick","TodoFilter","onSubmit","event","preventDefault","onChange","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","isTodoLoading","setIsTodoLoading","user","setUser","todoToShow","find","useEffect","userId","finally","href","email","name","App","isLoading","setIsLoading","currentTodo","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1bcb8c6.chunk.js","sourcesContent":["// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodoID/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodoID/SET';\n  payload: number;\n};\n\n// Action creator return type protect us from a mistype\nenum TodoIDActionType {\n  SET = 'currentTodoID/SET',\n  REMOVE = 'currentTodoID/REMOVE',\n}\nconst unselectTodoID = (): RemoveTodoAction => (\n  { type: TodoIDActionType.REMOVE }\n);\n\nconst selectTodoID = (todoID: number): SetTodoAction => ({\n  type: TodoIDActionType.SET,\n  payload: todoID,\n});\n\n// These actions will be used in the application\nexport const actionsWithTodoID = {\n  set: selectTodoID,\n  remove: unselectTodoID,\n};\n\ntype State = number | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoIDReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case TodoIDActionType.SET:\n      return action.payload;\n    case TodoIDActionType.REMOVE:\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoIDReducer;\n","import { Status } from '../types/Status';\n\nexport enum FilterMethods {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n\nexport enum FiltersActionType {\n  ALL = 'filterStatus/ALL',\n  COMPLETED = 'filterStatus/COMPLETED',\n  ACTIVE = 'filterStatus/ACTIVE',\n  QUERY = 'filterQuery/QUERY',\n}\n\ntype SetFilterStatusAll = {\n  type: FiltersActionType.ALL;\n  payload: Status;\n};\ntype SetFilterStatusDone = {\n  type: FiltersActionType.COMPLETED;\n  payload: Status;\n};\ntype SetFilterStatusActive = {\n  type: FiltersActionType.ACTIVE;\n  payload: Status;\n};\ntype SetFilterByQuery = {\n  type: FiltersActionType.QUERY;\n  payload: string;\n};\n\nconst filteredAll = (): SetFilterStatusAll => ({\n  type: FiltersActionType.ALL,\n  payload: FilterMethods.ALL,\n});\n\nconst filteredByCompleted = (): SetFilterStatusDone => ({\n  type: FiltersActionType.COMPLETED,\n  payload: FilterMethods.COMPLETED,\n});\n\nconst filteredByActive = (): SetFilterStatusActive => ({\n  type: FiltersActionType.ACTIVE,\n  payload: FilterMethods.ACTIVE,\n});\n\nconst filteredByQuery = (query: string): SetFilterByQuery => ({\n  type: FiltersActionType.QUERY,\n  payload: query,\n});\n\nexport const actionsWithFilter = {\n  all: filteredAll,\n  completed: filteredByCompleted,\n  active: filteredByActive,\n  query: filteredByQuery,\n};\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\ntype Action = (\n  SetFilterStatusAll | SetFilterStatusDone\n  | SetFilterStatusActive | SetFilterByQuery\n);\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: FilterMethods.ALL,\n  },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case FiltersActionType.ALL:\n      return {\n        ...state,\n        status: FilterMethods.ALL,\n      };\n\n    case FiltersActionType.ACTIVE:\n      return {\n        ...state,\n        status: FilterMethods.ACTIVE,\n      };\n\n    case FiltersActionType.COMPLETED:\n      return {\n        ...state,\n        status: FilterMethods.COMPLETED,\n      };\n\n    case FiltersActionType.QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Action } from 'redux';\nimport { Todo } from '../types/Todo';\n\ninterface FullAction<T, P> extends Action<T> {\n  payload: P,\n}\n\nexport enum TodosActionType {\n  SetTodos = 'todos/set_todos',\n}\n\nexport type SetTodosAction = FullAction<TodosActionType.SetTodos, Todo[]>;\n\nconst setTodosActionCreator = (todos: Todo[]): SetTodosAction => ({\n  type: TodosActionType.SetTodos,\n  payload: todos,\n});\n\nexport const actionsWithTodos = {\n  set: setTodosActionCreator,\n};\n\ntype TodosActions = SetTodosAction;\n\nconst todosReducer = (\n  todosState: Todo[] = [],\n  action: TodosActions,\n): Todo[] => {\n  switch (action.type) {\n    case TodosActionType.SetTodos:\n      return action.payload;\n\n    default:\n      return todosState;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoIDReducer from '../features/currentTodoID';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodoID: currentTodoIDReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actionsWithTodoID } from '../../features/currentTodoID';\nimport { FilterMethods } from '../../features/filter';\n\nexport const TodoList: React.FC = () => {\n  const todosToShow = useAppSelector(state => {\n    const { todos } = state;\n    const { query, status } = state.filter;\n\n    const todosToReturn = todos.filter(todo => {\n      const isIncludeQuery = todo.title.toLowerCase().includes(query.toLowerCase().trim());\n\n      switch (status) {\n        case FilterMethods.COMPLETED:\n          return !todo.completed && isIncludeQuery;\n\n        case FilterMethods.ACTIVE:\n          return todo.completed && isIncludeQuery;\n\n        case FilterMethods.ALL:\n        default:\n          return isIncludeQuery;\n      }\n    });\n\n    return todosToReturn;\n  });\n\n  const currentTodoID = useAppSelector(state => state.currentTodoID);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {todosToShow.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todosToShow.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              key={todo.id}\n              className={todo.id === currentTodoID ? 'has-background-info-light' : ''}\n            >\n              <td className=\"is-vcentered\">\n                {todo.id}\n              </td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span\n                    className=\"icon\"\n                    data-cy=\"iconCompleted\"\n                  >\n                    <i\n                      className=\"fas fa-check\"\n                    />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(actionsWithTodoID.set(todo.id));\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={currentTodoID === todo.id\n                      ? 'far fa-eye-slash'\n                      : 'far fa-eye'}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actionsWithFilter, FilterMethods } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { query } = useAppSelector(state => state.filter);\n\n  const chooseOfFilterMethod = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    switch (event.target.value) {\n      case FilterMethods.ACTIVE:\n        return dispatch(actionsWithFilter.active());\n\n      case FilterMethods.COMPLETED:\n        return dispatch(actionsWithFilter.completed());\n\n      case FilterMethods.ALL:\n      default:\n        return dispatch(actionsWithFilter.all());\n    }\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={chooseOfFilterMethod}\n          >\n            <option value={FilterMethods.ALL}>All</option>\n            <option value={FilterMethods.ACTIVE}>Active</option>\n            <option value={FilterMethods.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event => {\n            dispatch(actionsWithFilter.query(event.target.value));\n          })}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(actionsWithFilter.query(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { useAppSelector } from '../../app/hooks';\nimport { actionsWithTodoID } from '../../features/currentTodoID';\n\nexport const TodoModal: React.FC = () => {\n  const [isTodoLoading, setIsTodoLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const currentTodoID = useAppSelector(state => state.currentTodoID);\n  const todoToShow = useAppSelector(\n    state => (state.todos.find(todo => todo.id === currentTodoID) || null),\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsTodoLoading(true);\n    getUser(todoToShow?.userId || 0)\n      .then(res => setUser(res))\n      .finally(() => setIsTodoLoading(false));\n  }, []);\n\n  return (\n    <div\n      className=\"modal is-active\"\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {isTodoLoading\n        ? <Loader />\n        : user && todoToShow && (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                Todo #\n                {currentTodoID}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(actionsWithTodoID.remove())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p\n                className=\"block\"\n                data-cy=\"modal-title\"\n              >\n                {todoToShow.title}\n              </p>\n\n              <p\n                className=\"block\"\n                data-cy=\"modal-user\"\n              >\n                {todoToShow.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n                {' by '}\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actionsWithTodos } from './features/todos';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodoID);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(res => {\n        dispatch(actionsWithTodos.set(res));\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}